<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <UsingTask TaskName="DownloadFromAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />
  <UsingTask TaskName="FinalizeBuild" AssemblyFile="$(LocalBuildToolsTaskDir)core-setup.tasks.dll" />
  <UsingTask TaskName="ListAzureBlobs" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />
  <UsingTask TaskName="UploadToAzure" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.CloudTestTasks.dll" />

  <Target Name="Build"
          DependsOnTargets="PublishToAzure;PublishDebFilesToDebianRepo;PublishDebToolPackageToFeed;PublishFinalOutput" />
  
  <Target Name="PublishFinalOutput"
          Condition="'$(Finalize)' == 'true'"
          DependsOnTargets="PublishCoreHostPackagesToFeed;FinalizeBuildInAzure" />
          
  <Target Name="ExcludeSymbolsPackagesFromPublishedVersions" BeforeTargets="UpdatePublishedVersions" >
    <ItemGroup>
      <PackagesToShip Include="$(BinDir)/ForPublishing/*.nupkg" Exclude="$(BinDir)/ForPublishing/*.symbols.nupkg" />
      <PackagesToShip Remove="%(PackagesToShip.Identity)" Condition="$([System.String]::Copy('%(PackagesToShip.Identity)').Contains('latest'))" />
      <ShippedNuGetPackage Include="@(PackagesToShip)" />
    </ItemGroup>
  </Target>

  <Target Name="PublishToAzure"
          Condition="'$(Finalize)' != 'true'"
          DependsOnTargets="GatherPublishToAzureBinaries;GatherPublishToAzureInstallers;GatherPublishToAzureChecksums">
  </Target>

  <Target Name="EnsureUniqueItemsToUpload">
    <ItemGroup>
      <DedupItems Include="@(ItemsToPublish->Distinct())" />
    </ItemGroup>
    <PropertyGroup>
      <CountOld>@(ItemsToPublish->Count())</CountOld>
      <CountNew>@(DedupItems->Count())</CountNew>
      <_HasDups Condition="'$(CountOld)' != '$(CountNew)'">true</_HasDups>
    </PropertyGroup>
    <Message Importance="High" Condition="'$(_HasDups)' != ''" Text="ItemsToPublish: '@(ItemsToPublish)'"/>
    <Error Condition="'$(_HasDups)' != ''" Text="Duplicate Items Present in ItemsToPublish" />
  </Target>

  <Target Name="UploadToAzure"
          DependsOnTargets="EnsureUniqueItemsToUpload"
          Condition="'$(ItemsToPublish)' != ''">

    <ItemGroup>
      <ItemsToPublish Include="$(ItemsToPublish)" />
      <ItemsToPublish>
        <RelativeBlobPath>$(RelativeBlobPath)/%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPublish>
    </ItemGroup>
  </Target>
  
  <Target Name="UploadChecksumsToAzure"
          Condition="'$(ItemsToPublish)' != ''">

    <ItemGroup>
      <ItemsToPublish Include="$(ItemsToPublish)" />
      <ItemsToPublish>
        <RelativeBlobPath>$(RelativeBlobPath)/%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPublish>
    </ItemGroup>
  </Target>

  <Target Name="PublishDebFilesToDebianRepo"
          DependsOnTargets="GenerateDebRepoFiles">
      <Exec Condition="'@(DebInstallerFile)' != ''" Command="echo $(ProjectDir)tools-local/scripts/publish/repoapi_client.sh" />
  </Target>

  <Target Name="FinalizeBuildInAzure"
          DependsOnTargets="CheckIfAllBuildsHavePublished;
                            GetLatestCommitHash">
          
    <Message Importance="High" Text="Finalizing Build" />
    <!-- Ensure all publish pieces are present and then publish to Azure Latest container -->
    <Message Importance="High" Text="Finalizing Checksums" />
  </Target>

  <Target Name="PublishCoreHostPackagesToFeed"
          DependsOnTargets="CheckIfAllBuildsHavePublished;DownloadCoreHostPackages;SignSymbolPackages;DoPushCoreHostPackagesToFeed"
          Condition="'@(_MissingBlobNames)' == ''">
    <Message Condition="'$(WindowsSdkDir)' == ''" Text="Windows SDK not found.  Symbols packages will not be signed." />
  </Target>

  <Target Name="DownloadCoreHostPackages">
    <ListAzureBlobs AccountName="$(AzureAccountName)"
                      AccountKey="$(AzureAccessToken)"
                      ContainerName="$(ContainerName)"
                      FilterBlobNames="Runtime/$(SharedFrameworkNugetVersion)/">
      <Output TaskParameter="BlobNames" ItemName="_BlobList" />
    </ListAzureBlobs>
    <ItemGroup>
      <_CoreHostPackages Include="%(_BlobList.Identity)" Condition="'%(_BlobList.Extension)' == '.nupkg'" />
    </ItemGroup>

    <PropertyGroup>
      <DownloadDirectory Condition="'$(DownloadDirectory)' == ''">$(BinDir)PackageDownload/</DownloadDirectory>
      <PublishDirectory Condition="'$(PublishDirectory)' == ''">$(BinDir)ForPublishing/</PublishDirectory>
      <!-- if we're not signing packages, publish directly from the download directory, as we won't be
	       copying them to the indexed directory -->
      <PublishDirectory Condition="'$(WindowsSdkDir)' == ''">$(DownloadDirectory)</PublishDirectory>
    </PropertyGroup>
    <MakeDir Directories="$(DownloadDirectory)"
             Condition="!Exists('$(DownloadDirectory)')" />
    <DownloadFromAzure AccountName="$(AzureAccountName)"
                           AccountKey="$(AzureAccessToken)"
                           ContainerName="$(ContainerName)"
                           BlobNames="@(_CoreHostPackages)"
                           BlobNamePrefix="Runtime/$(SharedFrameworkNugetVersion)/"
                           DownloadDirectory="$(DownloadDirectory)" />
    <ItemGroup>
      <_DownloadedPackages Include="@(_CoreHostPackages->'$(PublishDirectory)%(Filename)%(Extension)')" />
      <_DownloadedSymbolsPackages Include="%(_DownloadedPackages.Identity)" 
                                 Condition="$([System.String]::new('%(_DownloadedPackages.Identity)').EndsWith('.symbols.nupkg'))" />
      <_DownloadedStandardPackages Include="@(_DownloadedPackages)"
                                  Exclude="@(_DownloadedSymbolsPackages)" />
    </ItemGroup>
  </Target>

  <Target Name="FindDownloadedPackagesForSigning">
    <PropertyGroup>
      <!-- Glob matching packages that we want to embed symbol signatures in. Used in BuildTools. -->
      <SymbolPackagesToPublishGlob Condition="'$(SymbolPackagesToPublishGlob)' == ''">$(DownloadDirectory)**\*.symbols.nupkg</SymbolPackagesToPublishGlob>
    </PropertyGroup>

    <ItemGroup>
      <SymbolPackagesToEmbedIndex Include="$(SymbolPackagesToPublishGlob)" />
      <NormalPackagesToNotEmbedIndex Include="$(DownloadDirectory)**\*.nupkg"
                                     Exclude="@(SymbolPackagesToEmbedIndex)" />
    </ItemGroup>

    <!-- Copy any nupkgs we skip running EmbedIndex on directly to the output folder. -->
    <Copy SourceFiles="@(NormalPackagesToNotEmbedIndex)"
          DestinationFolder="$(PublishDirectory)" />
  </Target>

  <Target Name="SignSymbolPackages"
          DependsOnTargets="FindDownloadedPackagesForSigning;InjectSignedSymbolCatalogIntoSymbolPackages"
          Condition="'$(WindowsSdkDir)' != ''">
    <ItemGroup>
      <EmbedIndexArgPairs Include="@(SymbolPackagesToEmbedIndex -> '%(Identity) $(PublishDirectory)%(Filename)%(Extension)')" />
    </ItemGroup>

    <!-- Inline the EmbedIndex.ps1 script used in CoreFX and CoreCLR: directly call EmbedIndex. -->
    <Exec Command="$(DotNetToolDir)\dotnet $(EmbedIndexToolDir)\tools\EmbedIndex.dll %(EmbedIndexArgPairs.Identity)" />
  </Target>

  <Target Name="DoPushCoreHostPackagesToFeed">
    <Error Condition="'@(_DownloadedSymbolsPackages)' != '' and '$(NuGetSymbolsFeedUrl)' == ''" Text="Missing required property NuGetSymbolsFeedUrl" />

    <Message Text="Pushing CoreHost packages to $(NuGetFeedUrl)" />
    <PropertyGroup>
      <NuGetPushCommand>echo $(DotnetToolCommand) nuget push --source $(NuGetFeedUrl) --api-key $(NuGetApiKey) --timeout $(NuGetPushTimeoutSeconds)</NuGetPushCommand>
      <NuGetPushSymbolsCommand>echo $(DotnetToolCommand) nuget push --source $(NuGetSymbolsFeedUrl) --api-key $(NuGetApiKey) --timeout $(NuGetPushTimeoutSeconds)</NuGetPushSymbolsCommand>
    </PropertyGroup>

      <!-- ToDo: look at moving this to an msbuild task so that we can include retry logic, parallelize it, and hide the api key -->
    <Exec Command="$(NuGetPushCommand) %(_DownloadedStandardPackages.Identity)" />

    <Message Condition="'@(_DownloadedSymbolsPackages)' != ''" Text="Pushing CoreHost symbols packages to $(NuGetSymbolsFeedUrl)" />
    <Exec Condition="'@(_DownloadedSymbolsPackages)' != ''" Command="$(NuGetPushSymbolsCommand) %(_DownloadedSymbolsPackages.Identity)" />
  </Target>

  <Target Name="PublishDebToolPackageToFeed"
          Condition="'$(PublishDebToolToFeed)' == 'true'">
    <Error Condition="'$(CliNuGetFeedUrl)' ==''" Text="Missing required property CliNuGetFeedUrl" />
    <Error Condition="'$(CliNuGetApiKey)' == ''" Text="Missing required property CliNuGetApiKey" />
    <ItemGroup>
      <DebToolPackages Include="$(PackagesOutDir)/dotnet-deb-tool.*.nupkg" />
    </ItemGroup>
    <PropertyGroup>
      <NuGetPushCommand>echo $(DotnetToolCommand) nuget push --source $(CliNuGetFeedUrl) --api-key $(CliNuGetApiKey) --timeout $(NuGetPushTimeoutSeconds)</NuGetPushCommand>
    </PropertyGroup>
    <Exec Command="$(NuGetPushCommand) %(DebToolPackages.Identity)" />
  </Target>
  
  <Import Project="$(ToolsDir)VersionTools.targets" Condition="Exists('$(ToolsDir)VersionTools.targets')" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
</Project>